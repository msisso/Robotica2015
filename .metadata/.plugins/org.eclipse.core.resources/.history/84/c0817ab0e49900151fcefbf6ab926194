
#include "Map.h"
#include "lodepng.h"
#include "iostream"
#include "fstream"

using namespace lodepng;

Map::Map(float mapResolution, float robotSize) : mapResolution(mapResolution), robotSize(robotSize)
{

	robotSizeInCells = robotSize / mapResolution;
	inflationRaduis = 0.3 * robotSizeInCells;
	cout << "inflation raduis" << inflationRaduis << endl;
}

void Map::loadMapFromFile(const char* filePath)
{
	decode(image, mapWidth, mapHeight, filePath);
	cout << "Map size: " << mapWidth << ", " << mapHeight << endl;

	loadMap();
//	printMap();
}

void Map::converImageToGrid()
{
	map.resize(mapHeight);
	for (unsigned int i = 0; i<mapHeight; i++)
	{
		map[i].resize(mapWidth);
	}
}

void Map::loadMap()
{
	converImageToGrid();
	unsigned int j = 0;
	unsigned int k = 0;

	for (int i = 0; i < mapHeight; i++) {
		for (int j = 0; j < mapWidth; j++) {
			/*cout << "this is i: "<< i<< "and this is j: " << j << endl;*/
			map[i][j] = checkIfCellIsOccupied(i, j);
		}
	}
	inflateObstacles();

}

bool Map::checkIfCellIsOccupied(int i, int j) {
	int c = (i * mapWidth + j) * 4;
	int r = image[c];
	int g = image[c + 1];
	int b = image[c + 2];

	if (r == 0 && g == 0 && b == 0)
		return true;
	return false;
}

void Map::inflateObstacles()
{
	vector<vector<bool> > inflatbleMap;
	inflatbleMap.resize(mapHeight);
	for (unsigned int i = 0; i<mapHeight; i++)
	{
		inflatbleMap[i].resize(mapWidth);
	}


	for (unsigned int i = 0; i < mapHeight; i++)
	{
		for (unsigned int j = 0; j < mapWidth; j++)
		{
			if (map[i][j])
			{
				int tempHieght = 0;
				int tempWidth = 0;
				tempHieght = (2 * inflationRaduis) + 1;
				tempWidth = (2 * inflationRaduis) + 1;
				for (unsigned a = (i - inflationRaduis); a < (i + inflationRaduis); a++)
				{
					for (unsigned b = (j - inflationRaduis); b < (j + inflationRaduis); b++)
					{
						if ((a >= 0 && a < mapHeight) && (b >= 0 && b < mapWidth))
						{
							inflatbleMap[a][b] = true;
						}

					}
				}
			}

		}
	}
	printMap(inflatbleMap);

}

void Map::printMap(vector<vector<bool>> map) const
{
	ofstream myRoboticLab;
	myRoboticLab.open("myRoboticLab.txt");
	cout << mapHeight << endl;
	cout << mapWidth << endl;

	for (unsigned int i = 0; i < mapHeight; i++)
	{
		for (unsigned int k = 0; k < mapWidth; k++)
		{
			if (map[i][k])
			{
				myRoboticLab << "*";
			}
			else
			{
				myRoboticLab << " ";
			}
		}
		myRoboticLab << endl;
	}
	myRoboticLab.close();
}

Map::~Map() {
	// TODO Auto-generated destructor stub
}
